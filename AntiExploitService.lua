--------------------------------------------------------------------
-- AntiExploitService.lua | Callable Rate Limiter & Validator (ModuleScript)
-- • Replaces the flawed wrapper model with a stable, callable service.
-- • Uses a token-bucket algorithm to fairly rate-limit remote calls.
-- • Provides a centralized validation function for all server scripts.
--------------------------------------------------------------------
local Players = game:GetService("Players")

-- Module Interface
local AntiExploitService = {}

--------------------------------------------------------------------
-- CONFIGURATION
--------------------------------------------------------------------
local REMOTE_LIMITS = {
	CoinCollected   = { MaxTokens = 20, RefillRate = 10 },
	SprintToggle    = { MaxTokens = 5,  RefillRate = 2  },
	RequestRunStart = { MaxTokens = 3,  RefillRate = 0.5},
	RequestPrestige = { MaxTokens = 2,  RefillRate = 0.2},
	BuyItem         = { MaxTokens = 5,  RefillRate = 1  },
	EquipCosmetic   = { MaxTokens = 5,  RefillRate = 2  },
	Default         = { MaxTokens = 10, RefillRate = 5  },
}

local MAX_COIN_DISTANCE_SQUARED = 25 * 25 -- Use squared distance for performance

--------------------------------------------------------------------
-- STATE
--------------------------------------------------------------------
-- [userId][remoteName] = { tokens = number, lastUpdate = tick() }
local playerCallLog = {}

--------------------------------------------------------------------
-- PRIVATE HELPERS
--------------------------------------------------------------------
local function kick(player, reason: string)
	warn(("[AntiExploit] Kicking %s. Reason: %s"):format(player.Name, reason))
	player:Kick("Exploit detected: " .. reason)
end

--------------------------------------------------------------------
-- PUBLIC VALIDATION FUNCTION
--------------------------------------------------------------------
function AntiExploitService.Validate(player: Player, remoteName: string)
	if not player or not remoteName then return false end

	-- Get the log for this specific player and remote
	local uid = player.UserId
	playerCallLog[uid] = playerCallLog[uid] or {}
	local pLog = playerCallLog[uid]

	pLog[remoteName] = pLog[remoteName] or {
		tokens = (REMOTE_LIMITS[remoteName] or REMOTE_LIMITS.Default).MaxTokens,
		lastUpdate = tick(),
	}
	local rLog = pLog[remoteName]

	-- Refill tokens
	local limits = REMOTE_LIMITS[remoteName] or REMOTE_LIMITS.Default
	local now = tick()
	local elapsed = now - rLog.lastUpdate
	rLog.tokens = math.min(limits.MaxTokens, rLog.tokens + elapsed * limits.RefillRate)
	rLog.lastUpdate = now

	-- Check for available token
	if rLog.tokens >= 1 then
		rLog.tokens = rLog.tokens - 1
		return true -- Validation successful
	else
		kick(player, "Remote event spam (" .. remoteName .. ")")
		return false -- Validation failed
	end
end

-- A specific validator for coin collection
function AntiExploitService.ValidateCoin(player: Player, coinPos: Vector3)
	if not AntiExploitService.Validate(player, "CoinCollected") then return false end

	local hrp = player.Character and player.Character.PrimaryPart
	if not (hrp and typeof(coinPos) == "Vector3" and (hrp.Position - coinPos).Magnitude * (hrp.Position - coinPos).Magnitude < MAX_COIN_DISTANCE_SQUARED) then
		kick(player, "Invalid coin collection")
		return false
	end

	return true
end

--------------------------------------------------------------------
-- HOUSEKEEPING
--------------------------------------------------------------------
Players.PlayerRemoving:Connect(function(plr)
	playerCallLog[plr.UserId] = nil
end)

return AntiExploitService